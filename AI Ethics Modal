import pandas as pd
import nltk
import joblib
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from nltk.corpus import stopwords

nltk.download("stopwords")

DATA_PATH = "C:/Users/exion/Downloads/ai_ethics_expanded_dataset (1).csv"
MODEL_DIR = "models"
os.makedirs(MODEL_DIR, exist_ok=True)

def load_data(path):
    df = pd.read_csv(path)
    return df.dropna()

def preprocess(df):
    stop_words = set(stopwords.words("english"))
    df["Processed_Question"] = df["Question"].apply(
        lambda x: " ".join([word for word in x.lower().split() if word not in stop_words])
    )
    return df

def train_and_save_model(X_train, y_train, name):
    model = MultinomialNB()
    model.fit(X_train, y_train)
    joblib.dump(model, f"{MODEL_DIR}/{name}.pkl")
    return model

def evaluate(model, X_test, y_test, label):
    y_pred = model.predict(X_test)
    print(f"\nðŸ”¹ {label} Accuracy: {accuracy_score(y_test, y_pred)}")
    print(classification_report(y_test, y_pred))

def main():
    print("ðŸ“Š Loading and preprocessing data...")
    df = preprocess(load_data(DATA_PATH))

    vectorizer = TfidfVectorizer()
    X_tfidf = vectorizer.fit_transform(df["Processed_Question"])
    joblib.dump(vectorizer, f"{MODEL_DIR}/tfidf_vectorizer.pkl")

    # Train bias model
    print("\nðŸ§  Training Bias Classification Model...")
    X_train, X_test, y_train, y_test = train_test_split(X_tfidf, df["Bias Label"], test_size=0.2, random_state=42)
    bias_model = train_and_save_model(X_train, y_train, "bias_model")
    evaluate(bias_model, X_test, y_test, "Bias Classification")

    # Train compliance model
    print("\nðŸ§  Training Company Policy Compliance Model...")
    X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(X_tfidf, df["Company Policy Compliance"], test_size=0.2, random_state=42)
    compliance_model = train_and_save_model(X_train_c, y_train_c, "compliance_model")
    evaluate(compliance_model, X_test_c, y_test_c, "Company Policy Compliance")

    print("\nâœ… Training complete. Models saved in 'models/'.")

if __name__ == "__main__":
    main()

